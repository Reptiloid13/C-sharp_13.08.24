using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;

namespace GOF;

/// <summary>
/// Применение паттерна Singleton имеет смысл, когда нам необходимо наличие только одного объекта определенного типа в коде. Реализация Singleton позволяет нам получить такой объект и точку доступа к нему. При этом создаётся он только тогда, когда необходим.
/// Преимущества Singleton
/// 1.Контроль создания объектов — только один экземпляр класса
/// 2.Экономия ресурсов — не создаются лишние объекты
/// 3.Упрощенный доступ — единый доступ к объекту через статическое свойство
/// 4. Централизованное управление — все обращения к объекту проходят через один экземпляр
/// Недостатки Singleton
/// 1. Глобальное состояние — может привести к сложностям в тестировании
/// 2. Скрытые зависимости — усложняет понимание кода
/// 3. Проблемы с многопоточностью — требуется дополнительная синхронизация
/// 4. Нарушение принципа единственной ответственности
/// </summary>
public class Singleton
{
    // Статическая переменная - ссылка на конкретный экземпляр объекта
    private static Singleton instance;
    // Приватный конструктор
    private Singleton() { }
    // Конструктор вызывается для создания объекта, если он отсутствует 
    public static Singleton GetInstance()
    {
        if (instance == null)
            instance = new Singleton();
        return instance;
    }


}
